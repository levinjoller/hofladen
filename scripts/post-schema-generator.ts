// Generated by Google Gemini
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const schemasDir = path.resolve(__dirname, "../src/types/generated/");
const configFile = path.resolve(
  __dirname,
  "./post-schema-generator.config.json"
);

function postProcessSchemas() {
  if (!fs.existsSync(schemasDir)) {
    console.error(
      "‚ùå Das Verzeichnis 'zod-schemas' wurde nicht gefunden. Bitte zuerst die Schemas generieren."
    );
    return;
  }

  if (!fs.existsSync(configFile)) {
    console.error(
      "‚ùå Konfigurationsdatei 'post-processor.config.json' wurde nicht gefunden."
    );
    return;
  }

  const config = JSON.parse(fs.readFileSync(configFile, "utf-8"));

  for (const schema of config.schemas) {
    const filePath = path.join(schemasDir, schema.file);

    if (!fs.existsSync(filePath)) {
      console.warn(
        `‚ö†Ô∏è  Schema-Datei ${schema.file} nicht gefunden. √úberspringe...`
      );
      continue;
    }

    console.log(`üîß Verarbeite Schema-Datei: ${schema.file}`);
    let content = fs.readFileSync(filePath, "utf-8");

    for (const replacement of schema.replacements) {
      const regex = new RegExp(escapeRegExp(replacement.from), "g");
      content = content.replace(regex, replacement.to);
    }

    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ Schema-Datei erfolgreich aktualisiert.`);
  }

  console.log("üèÅ Post-Processing abgeschlossen.");
}

function escapeRegExp(string: string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}

postProcessSchemas();
