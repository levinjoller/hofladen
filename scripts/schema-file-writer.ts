// Generated by Google Gemini
import { writeFileSync, mkdirSync, existsSync, rmSync } from "fs";
import path from "path";
import {
  getZodType,
  toPascalCase,
  toKebabCase,
  ColumnMeta,
  toSingular,
} from "./schema-generator-utils";

type ParamMeta = {
  param_name: string;
  data_type: string;
  udt_name: string;
  enum_values: string[] | null;
};

export function prepareOutputDir(baseDir: string, subDirs: string[]): void {
  if (existsSync(baseDir)) {
    console.log(`🧹 Lösche alten Ordner: ${baseDir}`);
    rmSync(baseDir, { recursive: true, force: true });
  }
  console.log(`📁 Erstelle Ordner: ${baseDir}`);
  mkdirSync(baseDir, { recursive: true });
  subDirs.forEach((dir) =>
    mkdirSync(path.join(baseDir, dir), { recursive: true })
  );
}

export function writeSchemasToFile(
  entities: Map<string, ColumnMeta[]>,
  outputDir: string
): void {
  for (const [entityName, columns] of entities.entries()) {
    const fileContent = generateZodSchemaFileContent(entityName, columns);
    const kebabName = toKebabCase(entityName);
    writeFileSync(path.join(outputDir, `${kebabName}.ts`), fileContent);
    console.log(`✅ Schema für "${entityName}" generiert.`);
  }
}

export function writeFunctionSchemasToFile(
  functions: Map<string, ParamMeta[]>,
  outputDir: string
): void {
  for (const [functionName, params] of functions.entries()) {
    const PascalName = toPascalCase(functionName);
    const kebabName = toKebabCase(functionName);
    const SchemaName = `${PascalName}ParamsSchema`;

    const paramsContent = params
      .map(
        (p) =>
          `  ${p.param_name}: ${
            p.enum_values
              ? `z.enum(${JSON.stringify(p.enum_values)})`
              : getZodType(p)
          },`
      )
      .join("\n");

    const fileContent = `/**
 * NOTE: Auto-generated - DO NOT EDIT
 */
import { z } from "zod";

export const ${SchemaName} = z.object({
${paramsContent}
});

export type ${PascalName}Params = z.infer<typeof ${SchemaName}>;
`;

    writeFileSync(path.join(outputDir, `${kebabName}-params.ts`), fileContent);
    console.log(`✅ Schema für Funktion "${functionName}" generiert.`);
  }
}

function generateZodSchemaFileContent(
  entityName: string,
  columns: ColumnMeta[]
): string {
  const singularName = toSingular(entityName);
  const PascalName = toPascalCase(singularName);
  const SchemaName = `${PascalName}Schema`;
  const ArraySchemaName = `${PascalName}ArraySchema`;

  const zodSchemaContent = columns
    .map((col) => `  ${col.column_name}: ${getZodType(col)},`)
    .join("\n");

  return `/**
 * NOTE: Auto-generated - DO NOT EDIT
 */
import { z } from "zod";

export const ${SchemaName} = z.object({
${zodSchemaContent}
});

export type ${PascalName} = z.infer<typeof ${SchemaName}>;

export const ${ArraySchemaName} = z.array(${SchemaName});
`;
}
